# tips.py 只是一个用来记录的 py 文件，这个文件在系统运行时不会进行任何调用，用于二次开发与提示

# ------系统运行流程------
# 程序运行会被掌控板默认调用文件 boot.py ，这个 boot.py 比较迷惑，
# 不仅仅在掌控板重启先调用（正常运行下），而且在运行单个文件时，系统也会默认调用这个文件。
# 举个例子：假设我要运行我写的 test.py ，并在编译器里面直接单文件执行。掌控板也会最先调用 boot.py 然后在运行 test.py 。
# boot.py 按正常运行完毕后，掌控板会自动 main.py 作为系统主要的入口点。
# 在我设计的 main.py 中，主要实现的是：设置好系统运行时初始化的变量，然后再导入 loader.py 开始加载。
# 在导入 loader.py 之前，会定义各种全局变量，即使是空值也定义，为的是提示后人开发时程序会申请那些全局变量。
# loader.py 是在桌面加载前调用的，可以用于自动连接wifi、自动校准时间、插件自启动等等。
# 回到 main.py ，接下来就是加载主页面了，程序页面分为四个大类： home(主页面) setting(设置页面) plugin(选择插件页面) plugindiy(插件运行页面)
# 其中除了 plugindiy 以外都是系统内置设计好的页面。
# 再次回到 main.py ，接下来就是运行一个 checkEvent() 线程，这个线程主要是来不断检查用户是否在指定页面按下指定的按键。
# 实际上目前的 checkEvent() 只在主页面有效，因为其它页面均为 ItemSelector() 的套壳。
# 紧接着就是显示页面了，和 main.py 没什么关系了。main.py 会根据全局变量中 page 的值显示指定页面。

# ------页面的显示------
# page 文件夹中就是系统内置的页面了，对应关系如上面。

# -----内置功能使用-----
# TXTreader： # A 向上翻页、B 向下翻页、T 显示基本信息、H 退出阅读、P 上移一行、N 下移一行
# :调用例子:
# from TaoLiSystem.TXTreader import TXTreader as TXTreader
# TXTreader("正文", "标题").start()
#
# ItemSelector： A 确定、B 取消、P 上移一个、N 下移一个、T 最上、H 最下
# :调用例子:
# from TaoLiSystem.ItemSelector import ItemSelector as ItemSelector
# ItemSelector(["选项1", "选项2"], "标题").start() -> 选择项名称


# -----插件编写注意-----
# 插件的代码内容没有硬性规定，但是为了可以标识插件名称、作者、版本、介绍等信息
# 插件均以英文命名并放在 plugin 文件夹内
# 所以硬性规定开头必须写一个 json 注释，大体内容如下：
# {"Name": "插件名称","Version": "v0.0.1","Master": "插件制作者","Description": "插件介绍", "More": "更多说明会直接附在插件页面后面", "Filename":"文件名非必须，服务器必须加为插件下载地址"}

# 写插件时其实出现了一个问题：若 exec 在非 main.py 执行会出现代码内容访问模块级变量的情况，所以把加载插件的东西放在 main.py 中了。



# -----主页使用说明-----
# A 键 = 设置页面； B 键 = 插件页面
# P 触摸键 = 掌控板信息（B 退出） Y 触摸键 = 拓展版信息（B 退出）

# ---摩尔斯输入说明---
# A = . ；B = -；A+B = 完成输入
# P 上移光标 N 下移光标 Y 切换大小写 O 删除一个字